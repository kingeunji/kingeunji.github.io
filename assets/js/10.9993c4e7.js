(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{333:function(s,n,a){"use strict";a.r(n);var e=a(33),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"자바스크립트-비동기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자바스크립트-비동기"}},[s._v("#")]),s._v(" 자바스크립트 비동기")]),s._v(" "),a("h3",{attrs:{id:"_1-동기와-비동기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-동기와-비동기"}},[s._v("#")]),s._v(" 1. 동기와 비동기")]),s._v(" "),a("p",[s._v("동기적 처리(Synchronous) 란 코드가 순차적으로 실행되는 방식이다")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log(1);\nconsole.log(2);\nconsole.log(3);\n\n>>> 실행결과 : 1 2 3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("비동기적 처리(Asynchronous)는 특정 코드의 연산이 끝날 때까지 실행을 멈추지 않고 다음 코드를 먼저 실행하는 방식이다")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("setTimeout(function(){\n    console.log(1)\n}, 0)\nconsole.log(2)\n\n>>> 실행결과 : 2 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function getData() {\n    var data;\n    $.get('http://api.com/users', function(res) {\n        data = res.data\n    });\n    return data;\n}\n\nconsole.log(getData()) \n\n>>> 실행결과 : undefinded\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("위 코드와 같이 ajax로 데이터를 요청하고 받아올 때까지 기다려주지 않고 다음 코드를 먼저 실행하는 것이 비동기 처리이다.")]),s._v(" "),a("h3",{attrs:{id:"_2-콜백-함수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-콜백-함수"}},[s._v("#")]),s._v(" 2. 콜백 함수")]),s._v(" "),a("p",[s._v("비동기 처리를 순차적으로 동작을 처리하려면 어떻게 해야할까?"),a("br"),s._v("\n초기 자바스크립트는 "),a("strong",[s._v("콜백 함수")]),s._v(" 라는 방법을 사용했다.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function getData(callbackFunc) {\n    $.get('http://api.com/users', function(res) {\n        callbackFunc(res)\n    });\n}\n\ngetData(function(data) {\n    console.log(data);\n    // $.get()의 return 값이 data로 전달됨\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("위처럼 콜백함수를 사용하면 특정 로직이 끝났을 때 원하는 동작을 실행할 수 있다.\n비동기 함수가 return 하는 값이 있으면 콜백함수의 파라미터로 전달된다.")]),s._v(" "),a("h3",{attrs:{id:"_3-콜백-지옥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-콜백-지옥"}},[s._v("#")]),s._v(" 3. 콜백 지옥")]),s._v(" "),a("p",[s._v("콜백함수는 비동기적 작업이 많아 질수록 콜백이 깊어진다."),a("br"),s._v("\n또한 콜백 내에서 if문 분기와 에러 핸들링을 어렵게한다.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function asyncFunc1(callback) {\n    setTimeout(function() {\n        console.log(1);\n        callback()\n    }, 100)\n}\n\nfunction asyncFunc2(callback) {\n    setTimeout(function() {\n        console.log(2);\n        callback()\n    }, 100)\n}\n\nfunction asyncFunc3(callback) {\n    setTimeout(function() {\n        console.log(3);\n        callback()\n    }, 100)\n}\n\nfunction asyncFunc4(callback) {\n    setTimeout(function() {\n        console.log(4);\n        callback()\n    }, 100)\n}\n\nasyncFunc1(function(result) {\n    asyncFunc2(function(result) {\n        asyncFunc3(function(result) {\n            asyncFunc4()\n        })\n    })\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h3",{attrs:{id:"_4-promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-promise"}},[s._v("#")]),s._v(" 4. Promise")]),s._v(" "),a("p",[s._v("콜백 지옥을 해결하기 위해 "),a("code",[s._v("Promise")]),s._v(" 패턴이 나왔다"),a("br"),s._v("\n자바스크립트에서 Promise는 "),a("strong",[s._v("비동기적으로 실행하는 작업의 결과(성공/실패)를 나타내는 객체")]),s._v("이다."),a("br"),s._v("\nPromise는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다.")]),s._v(" "),a("p",[s._v("기존 콜백 함수로 사용하던 구조에 프로미스를 적용해보자.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function getData(callback) {\n    return new Promise(function(resolve, reject) {\n        $.get('http://api.com/users', function(res) {\n            resolve(res);\n        });\n    });\n}\n\ngetData().then(function(data) {\n    console.log(data);\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("code",[s._v("new Promise")]),s._v(", "),a("code",[s._v("resolve")]),s._v(", "),a("code",[s._v("reject")]),s._v(", "),a("code",[s._v("then()")]),s._v(" 등 처음보는 개념들이 나온다."),a("br"),s._v("\n하나씩 알아가보자")]),s._v(" "),a("h4",{attrs:{id:"promise-생성자"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-생성자"}},[s._v("#")]),s._v(" Promise 생성자")]),s._v(" "),a("p",[s._v("생성자 함수와 동일하게 new 로 Promise 객체를 만들 수 있다."),a("br"),s._v("\n이 때 인자로는 Executor 가 들어가는 데 "),a("code",[s._v("Executor")]),s._v("는 "),a("code",[s._v("resolve")]),s._v("와 "),a("code",[s._v("reject")]),s._v(" 라는 두 개의 함수를 매개변수로 받는 실행함수이다."),a("br"),s._v("\n작업이 성공적으로 이행되었으면 "),a("code",[s._v("resolve")]),s._v(" 함수를 호출하고, 오류가 발생한 경우 "),a("code",[s._v("reject")]),s._v(" 함수를 호출한다.")]),s._v(" "),a("h4",{attrs:{id:"promise-의-상태-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-의-상태-state"}},[s._v("#")]),s._v(" Promise 의 상태 (state)")]),s._v(" "),a("p",[a("code",[s._v("new Promise()")]),s._v(" 로 프로미스를 생성하고 종료될 때까지 3가지 상태를 갖는다.")]),s._v(" "),a("ul",[a("li",[s._v("Pending (대기) : 비동기 처리가 아직 완료되지 않은 상태")]),s._v(" "),a("li",[s._v("Fulfilled (이행) : 비동기 처리가 완료되어 프로미스 결과 값을 반환해준 상태"),a("br"),s._v("\n이행 상퇴가 되면 "),a("code",[s._v("then()")]),s._v(" 을 이용하여 처리 결과 값을 받을 수 있다.")]),s._v(" "),a("li",[s._v("Rejected (실패) : 비동기 처리가 실패하거나 오류가 발생한 상태\n실패 상태가 되면 실패한 이유(실패 처리의 결과 값)를 "),a("code",[s._v("catch()")]),s._v("로 받을 수 있다.")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/44806627/76385430-f38b4b00-63a4-11ea-8664-717d094a43a4.png",alt:"promises"}})]),s._v(" "),a("h4",{attrs:{id:"then-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#then-method"}},[s._v("#")]),s._v(" then() Method")]),s._v(" "),a("p",[s._v("then 메소드는 promise 객체를 리턴하고, 두 개의 콜백 함수를 인수로 받는다."),a("br"),s._v("\n사용 형태는 다음과 같다.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("promise.then(successCallback, failureCallback)\n\npromise.then(function (value) {\n  //성공했을 때 실행\n}, function (reason) {\n  //실패했을 때 실행\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"promise-chaining"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-chaining"}},[s._v("#")]),s._v(" Promise Chaining")]),s._v(" "),a("p",[s._v("then() 메소드 호출 후 프로미스 객체를 반환할 수 있어 여러 개의 프로미스를 연결해서 사용할 수 있다.")]),s._v(" "),a("h4",{attrs:{id:"promise의-문제점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise의-문제점"}},[s._v("#")]),s._v(" Promise의 문제점")]),s._v(" "),a("ul",[a("li",[s._v("프로미스를 사용한 예외 처리시 "),a("code",[s._v("try/catch")]),s._v(" 대신에 "),a("code",[s._v("catch()")]),s._v(" 메소드를 사용하여 예외 처리를 해야한다."),a("br"),s._v("\n동기 코드와 비동기 코드가 섞여 있을 때 예외 처리가 누락된다.")])]),s._v(" "),a("h3",{attrs:{id:"_5-async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-async-await"}},[s._v("#")]),s._v(" 5. async await")]),s._v(" "),a("p",[s._v("Promise 의 불편한 점을 해결하기 위해 ES7 부터 "),a("code",[s._v("async/await")]),s._v(" 키워드가 추가되었다."),a("br"),s._v("\n이 키워드를 사용하면 비동기 코드를 마치 동기 코드처럼 보이게 작성할 수 있다.")]),s._v(" "),a("h4",{attrs:{id:"async-await-기본-문법"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await-기본-문법"}},[s._v("#")]),s._v(" async await 기본 문법")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function 함수명() {\n  await 비동기_처리_메서드_명();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("여기서 주의할 점은 비동기 메소드가 프로미스 객체를 반환해야 await가 의도한 대로 동작한다.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// Promise로 작성한 코드 \nfunction fetchAuthorName(postId) {\n    return fetch('/posts/${postId}')\n        .then(response => response.json())\n        .then(post => post.userId)\n        .then(userId => {\n            return fetch('/users/${userId}')\n                    .then(response => response.json())\n                    .then(user => user.name); \n        });\n}\n\n// async await 키워드를 사용한 코드\nasync function asyncFetchAuthorName(postId) {\n    const postResponse = await fetch('/posts/${postId}');\n    const post = await postResponse.json();\n    const userId = post.userId;\n    const userResponse = await fetch('users/${userId}');\n    const user = await userResponse.json();\n    return user.name;\n}\n\nfetchAuthorName(1).then(name => console.log(\"name : \", name));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("두 코드의 다른 점은 function 앞에 "),a("code",[s._v("async")]),s._v("라는 예약어를 붙이고, Promise 객체를 리턴하는 비동기 처리를 하는 함수 앞에 "),a("code",[s._v("await")]),s._v("를 붙인다.")]),s._v(" "),a("h4",{attrs:{id:"async-await-예외-처리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await-예외-처리"}},[s._v("#")]),s._v(" async & await 예외 처리")]),s._v(" "),a("p",[s._v("동기/비동기 구분없이 "),a("code",[s._v("try/catch")]),s._v("로 일관되게 예외 처리를 할 수 있는 부분도 큰 이점이다.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function asyncFetchAuthorName(postId) {\n    const postResponse = await fetch('/posts/${postId}');\n    const post = await postResponse.json();\n    const userId = post.userId;\n    try {\n        const userResponse = await fetch('users/${userId}');\n        const user = await userResponse.json();\n        return user.name;\n    } catch(err) {\n        console.log('Faile to fetch User : ', err);\n        return \"Unknown\";\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);